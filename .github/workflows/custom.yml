name: Custom build
on:
  workflow_dispatch:
    inputs:
      cmake_options:
        description: 'Additional CMake options'
        required: true
        type: string

jobs:
#  appimage:
#    name: AppImage
#    strategy:
#      matrix:
#        include:
#          - { image: ubuntu-24.04, cpu_arch: x86_64 }
#          - { image: ubuntu-24.04-arm, cpu_arch: aarch64 }
#
#    runs-on: ${{ matrix.image }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          submodules: 'recursive'
#
#      - name: Dependencies
#        run: |
#          export CPU_ARCH=${{ matrix.cpu_arch }}
#          ./ci/appimage.deps.sh
#
#      - name: Build
#        run: |
#          export CPU_ARCH=${{ matrix.cpu_arch }}
#          ./ci/appimage.build.sh
#        env:
#          SCORE_EXTRA_CMAKE_ARGS: ${{ inputs.cmake_options }}
#
#      - name: Deploy
#        run: |
#          export GITTAGNOV=$(echo "$GITHUB_REF" | sed "s/.*\///;s/^v//")
#          export BUILD_ARTIFACTSTAGINGDIRECTORY="$PWD/staging"
#          export CPU_ARCH=${{ matrix.cpu_arch }}
#          mkdir -p "$BUILD_ARTIFACTSTAGINGDIRECTORY"
#          ./ci/appimage.deploy.sh
#
#      - name: Upload build
#        uses: actions/upload-artifact@v4
#        with:
#          name: appimage-${{ matrix.cpu_arch }}
#          path: |
#            staging/*.*
#
  win32:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Dependencies
        shell: bash
        run: ./ci/win32.deps.sh

      - name: Build
        shell: bash
        run: ./ci/win32.build.sh
        env:
          SCORE_EXTRA_CMAKE_ARGS: ${{ inputs.cmake_options }}

      - name: Deploy
        shell: bash
        run: |
          export GITTAGNOV=$(echo "$GITHUB_REF" | sed "s/.*\///;s/^v//")
          export BUILD_ARTIFACTSTAGINGDIRECTORY="$PWD/staging"
          mkdir -p "$BUILD_ARTIFACTSTAGINGDIRECTORY"
          ./ci/win32.deploy.sh

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            staging/*.*

  m1-package:
    name: macOS (AppleSilicon Release)
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '>=16'

      - run: |
          source ci/osx.package.deps.sh
        env:
          MACOS_ARCH: "aarch64"
          MAC_CERT_B64: ${{ secrets.MAC_CERT_B64 }}
          MAC_CODESIGN_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}

      - uses: jcelerier/import-codesign-certs@master
        with:
          p12-file-base64: ${{ secrets.MAC_CERT_B64 }}
          p12-password: ${{ secrets.MAC_CERT_PASSWORD }}

      - run: |
          source ci/osx.package.build.sh
        env:
          MACOS_ARCH: "aarch64"
          SCORE_EXTRA_CMAKE_ARGS: ${{ inputs.cmake_options }}

      - run: |
          export GITTAGNOV=$(echo "$GITHUB_REF" | sed "s/.*\///;s/^v//")
          export BUILD_ARTIFACTSTAGINGDIRECTORY=$PWD/staging
          mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY
          source ci/osx.package.deploy.sh
        env:
          MACOS_ARCH: "aarch64"
          MAC_ALTOOL_PASSWORD: ${{ secrets.MAC_ALTOOL_PASSWORD }}

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: macos-aarch64
          path: |
            staging/*.*
